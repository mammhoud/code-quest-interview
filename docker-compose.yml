version: "3.9"
networks:

  webserver:
    driver: bridge
    name: webserver
    external: false


###############################################
###############################################

services:

  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASS:-postgres}
      POSTGRES_DB: ${DB_NAME:-postgres}
      PGDATA: /data/${DB_NAME:-postgres}-${ENVIRONMENT}
    volumes:
      - ./docker/conf/${ENVIRONMENT}:/data/${DB_NAME:-postgres}/${ENVIRONMENT}
    env_file:
      - docker/.env

    ports:
      - "5432:5432"
    networks:
        - webserver
    restart: unless-stopped

      ###############################################
      ###############################################

  backend:
    image: python:3.11-alpine
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "3"
    container_name: backend
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-docker}

    volumes:
      # - ./docker/conf/backend/.venv/:/app/.venv/
      - ./:/app/
    entrypoint: [ "/app/docker/scripts/webserver-start.sh" ]
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - docker/.env
    networks:
      - webserver
    depends_on:
      - postgres
    restart: on-failure
    expose:
      - 8880
    # labels:
    #   # Need to explicitly enable because providers.docker.exposedByDefault=false
    #   - "traefik.enable=true"
    #   - "backend.loadbalancer.server.port=8000"
    #   # Port declaration for which dev port Traefik should forward requests on to. It's
    #   # not strictly required here - you could just skip this label and run dev on port
    #   # 80 and everything would just work. But if you ultimately end up running multiple
    #   # websites (i.e. multiple dev containers) on a single server, it can be helpful
    #   # to have them on separate, explicit ports like this.
    #   - "traefik.port=8880"
    #   - "traefik.http.routers.localserver.entrypoints=web"
    #   - "traefik.http.routers.localserver.rule=Host(`localhost`)"
    #   - "traefik.http.routers.localserver.entrypoints=web"
    #   - "traefik.http.routers.localserver.rule=PathPrefix(`/`)"
    #   - "traefik.http.routers.localserver.priority=1"
    #   # - "traefik.http.routers.localserver.middlewares=redirect@file"
    #   # - "traefik.http.routers.localserver.tls.domains[0].main=example.io"
    #   # - "traefik.http.routers.localserver.tls.domains[0].sans=*.example.io"
    #   ###############################################
    #   ###############################################

    #   # - "traefik.http.routers.localserver_secured.rule=Host(`example.io`)"
    #   # - "traefik.http.routers.localserver_secured.entrypoints=web-secured"
    #   # - "traefik.http.routers.localserver_secured.rule=PathPrefix(`/`)"
    #   # - "traefik.http.routers.localserver_secured.tls=true"
    #   # - "traefik.http.routers.localserver_secured.tls.certresolver=tlschallenge"
    #   # - "traefik.http.routers.localserver_secured.tls.domains[0].main=example.io"
    #   # - "traefik.http.routers.localserver_secured.tls.domains[0].sans=*.example.io"

  # traefik:
  #   container_name: traefik
  #   image: traefik:latest
  #   command:
  #     - "--log.level=INFO"
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedByDefault=false"
  #     # - "--providers.docker.network=web_network"
  #     - "--entrypoints.web.address=:80"
  #     - "--api.insecure=true" # Enable the Traefik dashboard without authentication
  #     - "--api.dashboard=true"
  #     - "--api.debug=true"
  #   restart: on-failure
  #   depends_on:
  #     - backend
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #     - "8080:8080" # Port for Traefik dashboard
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks:
  #     - webserver
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.api.rule=Host(`traefik.localhost`)"
  #     - "traefik.http.routers.api.service=api@internal"
  #     - "traefik.http.routers.api.entrypoints=web"
  #     - "traefik.docker.network=webserver"
  #     - "traefik.docker.network=webserver"

volumes:
  # queue:
  postgres:
  # pgadmin:
  # cbeats:
  # cworker:
  backend:
